#include "cac.h"

#include <lmapibuf.h>	// NetApiBufferFree()

static struct TSettingData SettingData[] =
{
	{ "print", "PORT",			1, 'i', 0,	1,	&PRINT_PORT,		"0-базиран порт за печат", "Подразбира се 0 (LPT1)", "Важи само за директен печат", "0" },
	{ "print", "CP1251",			1, 'i', 0,	1,	&PRINT_CP1251,		"Поддръжка на непрекодирана WINDOWS кирилица (кодова страница 1251)", "Подразбира се 0 (не)", "Важи само за директен печат", "0", },
	{ "print", "CHECK",			1, 'i', 0,	1,	&PRINT_CHECK,		"Проверка дали на порта за печат има WINDOWS драйвер", "Подразбира се 0 (не)", "Важи само за директен печат", "0" },
	{ "print", "PSEUDO",			1, 'i', 0,	1,	&PRINT_PSEUDO,		"Поддръжка на псевдографика (игнорира се при кодова страница 1251)", "Подразбира се 0 (не)", "Важи само за директен печат", "0" },
	{ "print", "WINDOWS",			0, 'i', 0,	1,	&WINDOWS_PRINT,		"Печат през Windows", "Подразбира се 1 (да)", NULL, "1" },
	{ "print", "SETUPEX",			0, 'i', 0,	1,	&PRINT_SETUPEX,		"Диалог за настройка на принтера", "Подразбира се 1 (да)", "Важи само за Windows печат", "1" },
	{ "print", "JUSTIFY",			1, 'i', 0,	2400,	&PRINT_JUSTIFY,		"Отстъп за печат в мерната единица на принтера", "Подразбира се 240 (2.032cm при 300 точки на инч)", "Важи само за Windows печат", "240" },
	{ "print", "PAGE_LEN",			1, 'i', 30,	240,	&DEFAULT_PAGE_LEN,	"Брой редове на страница", "Подразбира се 60 (нормален брой за стандартния шрифт)", NULL, "60" },
	{ "print", "ALIGN_TO",			0, 'i', 0,	6,	&DEFAULT_ALIGNMENT,	"Откъде да се прави отстъп при печат на широките книги", "Подразбира се 0 (няма отстъп)", "Важи само за Windows печат", "6" },
	{ "print", "LINE_WIDTH",		1, 'i', 0,	720,	&PRINT_LINE_WIDTH,	"Ширина на линията за чертане на графика", "Подразбира се 0 (автоматичен избор)", "Важи само за Windows печат", "0" },
	{ "print", "WINDOWS_A3",		0, 'i', 0,	1,	&WINDOWS_A3,		"Алтернативно форматиране на документите при печат на хартия A3", "Подразбира се 0 (стандартно форматиране)", "Важи само за Windows печат", "0" },
	{ "print", "BARCODES",			0, 'i', 0,  2,	&PRINT_BARCODES,		"Печат на баркодове (изисква се шрифт за баркодове)", "0 = не, 1 = баркод и цифри, 2 = само баркод, без цифри", "Подразбира се 0 (не); важи само за Word/html печат", "0" },
	{ "print", "BARCODE_ASTERISK",	0, 'i', 0,  2,	&BARCODE_ASTERISK,	"Печат на * преди и след баркода", "0 = не, 1 = само в баркода, 2 = в баркода и цифрите", "Подразбира се 1 (да)", "1" },
	{ "print", "BARCODE_FONT",		0, 's', 0,  100,	BARCODE_FONT,		"Шрифт за печат на баркодове", "Няма подразбираща се стойност", NULL, "" },
	{ "print", "BARCODE_FONT_SIZE",	0, 'i', 8,  48,	&BARCODE_FONT_SIZE,	"Размер на шрифта за баркодове", "Подразбира се 20 пункта, минимум 8, максимум 48", NULL, "20" },
	{ "print", "BARDIGIT_FONT",		0, 's', 0,	100,	BARDIGIT_FONT,		"Шрифт за печат на цифрите под баркода", "Подразбира се Arial", NULL, "Arial" },
	{ "print", "BARDIGIT_FONT_SIZE",	0, 'i', 8,	48,	&BARDIGIT_FONT_SIZE,	"Размер на шрифта, с който се печатат цифрите под баркода", "Подразбира се 10 пункта, минимум 8, максимум 48", NULL, "10" },
	{ "print", "SERVICE_PHONE",		0, 's', 0,  40,	SERVICE_PHONE,		"Служебен телефон на потребителите, работещи на този компютър", "Подразбиращата се стойност за целия съд се указва в глобалната", "конфигурация", "" },
	{ "print", "SERVICE_FAX",		0, 's', 0,  20,	SERVICE_FAX,		"Служебен факс на потребителите, работещи на този компютър", "Подразбиращата се стойност за целия съд се указва в глобалната", "конфигурация", "" },
	{ "print", "JUDGE_TYPE",		2, 'i', 0,  2,	&PRINT_JUDGE_TYPE,	"Извеждане на \"СЪДИЯ\" в някои от Word/html изходите: 0 = \"СЪДИЯ\",", "1 = \"<ВИД НА СЪДА> СЪДИЯ\", 2 = \"СЪДИЯ при <ИМЕ НА СЪДА>\"", "Подразбира се 1", "1" },
	{ "print", "COURT_ADDRESS_1",		2, 's', 0,  200,	PRINT_COURT_ADDRESS_1,	"Първи ред от адреса на съда в изходящите документи", "Подразбира се адреса на съда, с главни букви", NULL, "" },
	{ "print", "COURT_ADDRESS_2",		2, 's', 0,  200,	PRINT_COURT_ADDRESS_2,	"Втори ред от адреса на съда в изходящите документи", "Подразбира се телефона и факса от конфигурацията", NULL, "" },
	{ "print", "COURT_UPPERCASE",		2, 'i', 0,  1,    &PRINT_COURT_UPPERCASE,	"Извеждане на името на съда с главни букви", "Подразбира се 0 (не)", NULL, "" },

	{ "address", "LOCK_UCLP",	0, 'i', 0, 2,  &LOCK_UCLP,	"Ограничение за директна работа с населени места", "0 = няма, 1 = в рамките на областта, 2 = в рамките на общината", "Подразбира се 0 (няма ограничение)", "0" },
	{ "address", "LOCK_STREET",	0, 'i', 0, 2,  &LOCK_STREET,	"Ограничение за директна работа с улици", "0 = няма, 1 = в рамките на областта, 2 = в рамките на общината", "Подразбира се 1 (в рамките на областта)", "1" },

	{ "repeat", "REQUESTS",		0, 'i', 0, 1,  &REPEAT_REQUESTS,	"Последователно регистриране на входящи документи", "Подразбира се 0 (еднократно регистриране)", NULL, "0" },
	{ "repeat", "LAWSUITS",		0, 'i', 0, 1,  &REPEAT_LAWSUITS,	"Последователно образуване на дела", "Подразбира се 0 (еднократно образуване)", NULL, "0" },
	{ "repeat", "LAWSUITS1",	0, 'i', 0, 1,  &REPEAT_LAWSUITS1,	"Последователно редактиране на дела", "Подразбира се 0 (еднократно редактиране)", NULL, "0" },
	{ "repeat", "FIXES",		0, 'i', 0, 1,  &REPEAT_FIXES,		"Последователно насрочване на дела", "Подразбира се 0 (еднократно насрочване)", NULL, "0" },
	{ "repeat", "RESULTS",		0, 'i', 0, 1,  &REPEAT_RESULTS,	"Последователно вписване на резултат от открито заседание", "Подразбира се 0 (еднократно вписване)", NULL, "0" },
	{ "repeat", "MDRS",		0, 'i', 0, 1,  &REPEAT_MDRS,		"Последователно печатане на обявления/СРГ", "Подразбира се 0 (еднократно печатане)", NULL, "0" },
	{ "repeat", "MOVEMENTS",	0, 'i', 0, 1,  &REPEAT_MOVEMENTS,	"Последователно въвеждане на предоставяне/връщане", "Подразбира се 1 (последователно въвеждане)", NULL, "1" },
	{ "repeat", "SURROUNDS",	0, 'i', 0, 1,  &REPEAT_SURROUNDS,	"Последователно регистриране на съпровождащи документи", "Подразбира се 0 (еднократно регистриране)", NULL, "0" },
	{ "repeat", "SURROUNDS1",	0, 'i', 0, 1,  &REPEAT_SURROUNDS1,	"Последователно редактиране на съпровождащи документи", "Подразбира се 0 (еднократно редактиране)", NULL, "0" },
	{ "repeat", "P24A1S",		0, 'i', 0, 1,  &REPEAT_P24A1S,	"Последователно издаване на удостоверения по чл.24 ал.1 ЗОП", "Подразбира се 0 (еднократно издаване)", NULL, "0" },
	{ "repeat", "MESSAGES",		0, 'i', 0, 1,  &REPEAT_MESSAGES,	"Последователен печат на призовки/съобщения/писма", "Подразбира се 0 (еднократен печат)", NULL, "0" },
	{ "repeat", "ARCHIVES",		0, 'i', 0, 1,  &REPEAT_ARCHIVES,	"Последователно архивиране на дела", "Подразбира се 1 (последователно архивиране)", NULL, "1" },
	{ "repeat", "ANNOUNCES",	0, 'i', 0, 1,  &REPEAT_ANNOUNCES,	"Последователно въвеждане на призовки от други съдилища", "Подразбира се 1 (последователно въвеждане)", NULL, "1" },
	{ "repeat", "PAYMENTS",		0, 'i', 0, 1,  &REPEAT_PAYMENTS,	"Последователно въвеждане на плащания", "Подразбира се 0 (еднократно въвеждане)", NULL, "0" },
	{ "repeat", "DESTROYS",		0, 'i', 0, 1,  &REPEAT_DESTROYS,	"Последователно унищожаване на дела", "Подразбира се 0 (еднократно унищожаване)", NULL, "0" },
	{ "repeat", "BARCODES",		0, 'i', 0, 1,  &REPEAT_BARCODES,	"Предлагане на данните от последната въведена призовка или съобщение на", "друг съд при последователно сканиране на баркодове", "Подразбира се 1 (предлагат се)", "1" },
	{ "repeat", "BOOKS_A",		0, 'i', 0, 15, &REPEAT_BOOKS_A,	"Последователен печат на книги: 1 = Описна, 2 = Азбучник, 4 = Закрити", "заседания, 8 = Срочна; важи само за HTML формат", "Стойностите се комбинират, например 5 = Описна + Закрити заседания", "0" },

	{ "autorun", "BASICS",	0, 'i', 0, 1, &AUTORUN_BASICS,	"Автоматично изпълнение на базовите функции", "Подразбира се 1 (въпрос към потребителя)", NULL, "1" },
	{ "autorun", "FIXES",	0, 'i', 0, 1, &AUTORUN_FIXES,		"Автоматично насрочване на дело", "Подразбира се 1 (въпрос към потребителя)", NULL, "1" },
	{ "autorun", "WALNS",	0, 'i', 0, 1, &AUTORUN_WALNS,		"Автоматично отпечатване на призовки", "Подразбира се 1 (въпрос към потребителя)", NULL, "1" },
	{ "autorun", "MDRS",	0, 'i', 0, 1, &AUTORUN_MDRS,		"Автоматично изготвяне на СРГ", "Подразбира се 0 (ръчно)", NULL, "0" },
	{ "autorun", "ENDOCS",	0, 'i', 0, 1, &AUTORUN_ENDOCS,	"Автоматично вписване на решение/определение/присъда", "Подразбира се 1 (автоматично)", NULL, "1" },
	{ "autorun", "MSRS",	0, 'i', 0, 1, &AUTORUN_MSRS,		"Автоматично изготвяне на съобщения \"С определение/Спряно/Прекратено...\"", "Подразбира се 0 (ръчно)", NULL, "0" },

	{ "external", "TEXT_SOURCE_PATH",		0, 'd', 0, 200,	Electrics[TYPE_TEXT].sourcePath,	"Директория под която са разположени текстовите оригинали", "Подразбира се F:\\ORIGIN\\TEXT; максимум 200 символа", "Може да се ползва и име на сървър, например \\\\SERVER\\VOL\\ORIGIN\\TEXT", "F:\\ORIGIN\\TEXT" },
	{ "external", "TEXT_PATH",			2, 'd', 0, 200,	Electrics[TYPE_TEXT].docketPath,	"Директория под която са разположени текстовите документи", "Подразбира се F:\\DOCKET\\TEXT; максимум 200 символа", "Може да се ползва и име на сървър, например \\\\SERVER\\VOL\\TEXT", "F:\\DOCKET\\TEXT" },
	{ "external", "TEXT_TYPE",			2, 'e', 0, 34,	Electrics[TYPE_TEXT].ext,			"Типове на текстовите документи", "Подразбира се DOC, максимум 10 типа до 4 символа всеки", NULL, "DOC" },
#if TESTVER
	{ "external", "TEXT_EDITOR",			4, 'p', 0, 250,	Electrics[TYPE_TEXT].Actions[ACTION_EDIT].program,	"Програма за редактиране на текстови документи или Registry клас", "Подразбира се програмата с която от Explorer се прави Edit или Open (в", "този ред) на TEXT_TYPE документи; максимум 250 символа", NULL },
	{ "external", "TEXT_EDITOR_ARGUMENTS",	0, 's', 0, 40,	Electrics[TYPE_TEXT].Actions[ACTION_EDIT].arguments,	"Параметри за редактиране на текстови документи", "Подразбира се никакви; максимум 40 символа", "Важи само ако е указана TEXT_EDITOR програма (не клас)", NULL },
	{ "external", "TEXT_VIEWER",			0, 'p', 0, 250,	Electrics[TYPE_TEXT].Actions[ACTION_VIEW].program,	"Програма за показване на текстови документи или Registry клас", "Подразбира се програмата с която от Explorer се прави View или Open (в", "този ред) на TEXT_TYPE документи; максимум 250 символа", NULL },
	{ "external", "TEXT_VIEWER_ARGUMENTS",	0, 's', 0, 40,	Electrics[TYPE_TEXT].Actions[ACTION_VIEW].arguments,	"Параметри за показване на текстови документи", "Подразбира се никакви; максимум 40 символа", "Важи само ако е указана TEXT_VIEWER програма (не клас)", NULL },
#else  // TESTVER
	{ "external", "TEXT_EDITOR",			0, 'p', 0, 250,	Electrics[TYPE_TEXT].Actions[ACTION_EDIT].program,	"Програма за редактиране на текстови документи", "Подразбира се програмата с която от Explorer се прави Edit или Open (в", "този ред) на TEXT_TYPE документи; максимум 250 символа", NULL },
	{ "external", "TEXT_EDITOR_ARGUMENTS",	0, 's', 0, 40,	Electrics[TYPE_TEXT].Actions[ACTION_EDIT].arguments,	"Параметри за редактиране на текстови документи", "Подразбира се никакви; максимум 40 символа", "Игнорира се ако не е указан TEXT_EDITOR", NULL },
	{ "external", "TEXT_VIEWER",			0, 'p', 0, 250,	Electrics[TYPE_TEXT].Actions[ACTION_VIEW].program,	"Програма за показване на текстови документи", "Подразбира се програмата с която от Explorer се прави View или Open (в", "този ред) на TEXT_TYPE документи; максимум 250 символа", NULL },
	{ "external", "TEXT_VIEWER_ARGUMENTS",	0, 's', 0, 40,	Electrics[TYPE_TEXT].Actions[ACTION_VIEW].arguments,	"Параметри за показване на текстови документи", "Подразбира се никакви; максимум 40 символа", "Игнорира се ако не е указан TEXT_VIEWER", NULL },
#endif  // TESTVER
	{ "external", "IMAGE_SOURCE_PATH",		0, 'd', 0, 200,	Electrics[TYPE_IMAGE].sourcePath,	"Директория под която са разположени графичните оригинали", "Подразбира се F:\\ORIGIN\\IMAGE; максимум 200 символа", "Може да се ползва и име на сървър, например \\\\SERVER\\VOL\\ORIGIN\\IMAGE", "F:\\ORIGIN\\IMAGE" },
	{ "external", "IMAGE_PATH",			2, 'd', 0, 200,	Electrics[TYPE_IMAGE].docketPath,	"Директория под която са разположени графичните документи", "Подразбира се F:\\DOCKET\\IMAGE; максимум 200 символа", "Може да се ползва и име на сървър, например \\\\SERVER\\VOL\\IMAGE", "F:\\DOCKET\\IMAGE" },
	{ "external", "IMAGE_TYPE",			2, 'e', 0, 34,	Electrics[TYPE_IMAGE].ext,		"Типове на графичните документи", "Подразбира се TIF<F>; максимум 10 типа до 4 символа всеки", NULL, "TIF<F>" },
	{ "external", "IMAGE_EDITOR",			0, 'p', 0, 250,	Electrics[TYPE_IMAGE].Actions[ACTION_EDIT].program,	"Програма за редактиране на графични оригинали", "Подразбира се програмата с която от Explorer се прави Edit или Open (в", "този ред) на IMAGE_TYPE документи; максимум 250 символа", NULL },
	{ "external", "IMAGE_EDITOR_ARGUMENTS",	0, 's', 0, 40,	Electrics[TYPE_IMAGE].Actions[ACTION_EDIT].arguments,	"Параметри за редактиране на графични документи", "Подразбира се никакви; максимум 40 символа", "Игнорира се ако не е указан IMAGE_EDITOR", NULL },
	{ "external", "IMAGE_VIEWER",			0, 'p', 0, 250,	Electrics[TYPE_IMAGE].Actions[ACTION_VIEW].program,	"Програма за показване на графични документи", "Подразбира се програмата с която от Explorer се прави View или Open (в", "този ред) на IMAGE_TYPE документи; максимум 250 символа", NULL },
	{ "external", "IMAGE_VIEWER_ARGUMENTS",	0, 's', 0, 40,	Electrics[TYPE_IMAGE].Actions[ACTION_VIEW].arguments,	"Параметри за показване на графични оригинали", "Подразбира се никакви; максимум 40 символа", "Игнорира се ако не е указан IMAGE_VIEWER", NULL },
	{ "external", "NOTEPAD",			0, 'p', 0, 250,	Electrics[TYPE_PLAIN].Actions[ACTION_EDIT].program,		"Програма за отваряне на текстови файлове", "Подразбира се notepad.exe", "Максимум 250 символа", NULL },
	{ "external", "NOTEPAD_ARGUMENTS",		0, 's', 0, 40,	Electrics[TYPE_PLAIN].Actions[ACTION_EDIT].arguments,		"Параметри за показване на текстови файлове", "Подразбира се никакви; максимум 40 символа", "Игнорира се ако в NOTEPAD се впише празна стойност", NULL },
	{ "external", "SAVE_SUBPOENAS",		2, 'i', 0, 1,	&SAVE_SUBPOENAS,	"Съхраняване на копие от отпечатаните призовки", "Подразбира се 0 (не)", NULL, "0" },
	{ "external", "WORD_OPEN_7A",			0, 'i', 0, 2,	&WORD_OPEN_7A,	"Пробно отваряне на Word файлове за избягване на блокирането в", "СГС. Подразбира се 0 (не), максимум 2, важи само за СГС", NULL, "0" },
	{ "external", "SERVER_NAME",			2, 's', 0, 200,	&EXTERNAL_SERVER,	"Име или IP адрес на сървъра за съхраняване на регистрирани съдебни", "актове. Ако не е указано, функцииите за работа с регистрирани", "съдебни актове ще бъдат блокирани.", "" },
	{ "external", "WAIT_FOR_ATTACH",		0, 'i', 0, 1,	&WAIT_FOR_ATTACH,	"Изчакване за затваряне на външната програма при Присъдиняване и Показване", "Подразбира се 0 (не)", "Препоръчва се програмата да е зададена с име на изпълним файл", "0" },
	//{ "external", "HIDE_ALL_ON_SAVE",		0, 'i', 0, 2,	&HIDE_ALL_ON_SAVE,"Скриване на всички прозорци при отваряне на документ за печат и последващо", "съхраняване в електронна папка. 0 = не, 1 = да, 2 = да + минимизиране на", "прозореца за изчакване. Подразбира се 0 (не)", "0" },
	{ "external", "HIDE_ALL_ON_SAVE",		0, 'i', 0, 1,	&HIDE_ALL_ON_SAVE,"Скриване на всички прозорци при отваряне на документ за печат и последващо", "съхраняване в електронна папка.", "Подразбира се 0 (не)", "0" },
	{ "external", "SIGN_TEST",			0, 'p', 0, 250,	SIGN_TEST, "Програма за проверка на подписа на PDF файлове", "Подразбира се ..\\SignTest\\signtest.exe", NULL, "..\\SignTest\\signtest.exe" },
	{ "external", "SIGN_PDFS",			2, 'i', 0, 1,	&SIGN_PDFS, "Задължително присъединяване на цифрово подписан PDF файл към актовете,", "подлежащи на публикуване в ТР", "Подразбира се 0 (не)", "0" },

	{ "application", "PRINT_COMPOSITIONS",	0, 'i', 0, 1,	&PRINT_COMPOSITIONS,	"В призовките, книгите и справките да се отпечатва съдебен състав", "Подразбира се 0 (не)", NULL, "0" },
	{ "application", "PRINT_JUDGEMENTS",	0, 'i', 0, 2,	&PRINT_JUDGEMENTS,	"В призовките, книгите и справките да се отпечатва номер на присъдата", "При стойност 2, номер на акта се изпраща към ЦУБИПСА само за актове", "с дата >= 01.01.2016г. Подразбира се 0 (не се отпечатва)", "0" },
	{ "application", "PROPAGANDATE_JUDGE",	0, 'i', 0, 1,	&PROPAGANDATE_JUDGE,	"Презапис на съдията по делото след всяко заседание", "Подразбира се 0 (не)", NULL, "0" },
	{ "application", "SHOWUP_IMPORTANT",	0, 'i', 0, 1,	&SHOWUP_IMPORTANT,	"Извеждане на справка за делата от обществен интерес на старта на", "програмата", "Подразбира се 0 (не)", "0" },
	{ "application", "SHOWUP_REGISTER_ACT",	0, 'i', 0, 1,	&SHOWUP_REGISTER_ACT,	"Регистриране на съдебни актове на старта на програмата.", "Подразбира се 0 (не)", NULL, "0" },
	{ "application", "ALT_PATCH_COLUMNS",	0, 'i', 0, 1,	&ALT_PATCH_COLUMNS,	"Включване на специалните колони за фишовете - когато книгите се печатат на", "Copycenter, а фишовете - на матричен принтер", "Подразбира се 0 (не)", "0" },
	{ "application", "AREA_SPLIT_DESC_BOOK",	0, 'i', 0, 1,	&AREA_SPLIT_DESC_BOOK,	"Отпeчатване на Описна книга по инстанции", "Важи за Окръжен, Администратиен и Военен съд", "Подразбира се 1 (да)", "1" },
	{ "application", "CENTER_PROGRESS_BAR",	0, 'i', 0, 1,	&CENTER_PROGRESS_BAR,	"Приоритет на диалога с прогрес-индикатор пред останалите диалози", "Подразбира се 0", NULL, "0" },
	{ "application", "LEFT_MEETING",		0, 'i', 0, 1,	&LEFT_MEETING,		"Извеждане на датата на първото събрание на кредиторите в \"Справка за", "делата по несъстоятелност\" независимо от това, че същото може да е било", "отложено. Важи само за Окръжен съд. Подразбира се 0 (не)", "0" },
	{ "application", "SIGN_SUMMONS",		0, 'i', 0, 1,	&SIGN_SUMMONS,		"Изписване името на потребителя, издал призовката след текста", "\"Секретар:...\" (напр. \"Секретар:......../И. Иванова/\").", "Подразбира се 0 (не се изписва)", "0" },
	{ "application", "WRITINGS_ACTIVE",		0, 'i', 0, 2,	&WRITINGS_ACTIVE,		"Да се избира ли автоматично призовкар при Печат на призовка/съобщение", "0 = не, 1 = да, 2 = да, без отпечатване на името на призовкаря", "Подразбира се 0 (не)", "0" },
	{ "application", "PRINT_UCN",			0, 'i', 0, 1,	&PRINT_UCN,			"Да се извеждат данни за ЕГН на физически лица", "Използва се при печат на Азбучник за всички съдилища.", "Подразбира се 0 - не се извеждат данни.", "0" },
	{ "application", "LOCK_RETURN",		0, 'i', 0, 1,	&LOCK_RETURN,		"Заключване на полето \"дата на връщане\" при закрити заседания и съдебни", "актове", "Подразбира се 0 (в полето може да се въвежда)", "0" },
	{ "application", "KILL_FORWARD_SIDES",	0, 'i', 0, 1,	&KILL_FORWARD_SIDES,	"Изтриване на последващи срещания на лицата като страни в събития", "Подразбира се 0 (не), естествено", "Не променяйте тази настройка без да сте напълно наясно какво правите", "0" },
	{ "application", "RKO_ADD_DATA",		0, 'i', 0, 1,	&RKO_ADD_DATA,		"Извеждане в РКО на данни за колегия/отделение, съдебен състав и секретар", "Подразбира се 1 (извеждат се данни)", NULL, "1" },
	{ "application", "PRINT_COLLEGE",		0, 'i', 0, 1,	&PRINT_COLLEGE,		"В призовките, книгите и справките да се отпечатва колегия/отделение", "Подразбира се 1 (да)", NULL, "1" },
	{ "application", "PRINT_PAGE_BREAK",	0, 'i', 0, 1,	&PRINT_PAGE_BREAK,	"Преминаване на нова страница при печат на двустранни изходи", "Подразбира се 1 (да)", NULL, "1" },
	{ "application", "DEC_REG_NUM_ALL",		2, 'i', 0, 1,	&DEC_REG_NUM_ALL,		"Регистър на решенията за всички ненаказателни дела", "Подразбира се 0 (само за делата по новия ГПК)", NULL, "0" },
	{ "application", "OUT_PATH",			0, 'd', 0, 200,	OUT_PATH,			"Подразбираща се директория за запис на файлове", "Използва се при запис на текстови справки, WEB справки и т.н.", "Подразбира се директорията на потребителя; максимум 200 символа", NULL },
	{ "application", "PING_DATABASE",		0, 'i', 0, 900,	&PING_DATABASE,		"Изпращане на периодични заявки до базата данни за поддържане на връзката", "Стойността е в секунди, подразбира се 0 (не се изпращат заявки)", "Промяната изисква рестарт, <1 минута трябва да се ползва само за тестове", "0" },
	{ "application", "WEB_FIXED_START_DATE",	0, 'a', 0, 10,	&WEB_FIXED_START_DATE,	"Начална дата на справка за WEB страница, за насрочени дела,", "Презаписва се автоматично", NULL, "" },
	{ "application", "WEB_FIXED_FINAL_DATE",	0, 'a', 0, 10,	&WEB_FIXED_FINAL_DATE,	"Крайна дата на справка за WEB страница, за насрочени дела", "Презаписва се автоматично", NULL, "" },
	{ "application", "WEB_QUERY_START_DATE",	0, 'a', 0, 10,	&WEB_QUERY_START_DATE,	"Начална дата на справка за WEB страница, други варианти", "Презаписва се автоматично", NULL, "" },
	{ "application", "WEB_QUERY_FINAL_DATE",	0, 'a', 0, 10,	&WEB_QUERY_FINAL_DATE,	"Крайна дата на справка за WEB страница, други варианти", "Презаписва се автоматично", NULL, "" },
	{ "application", "WEB_QUERY_USE_STYLES",	0, 'i', 0, 1,	&WEB_QUERY_USE_STYLES,	"Използване на стилове (шрифт и подравняване) в справката за WEB страница", "Подразбира се 1 (да)", "Не важи за всички варианти", "1" },
	{ "application", "PRINT_EXEC_LIST_NO",	0, 'i', 0, 3,	&PRINT_EXEC_LIST_NO,	"Печат на номера на изпълнителния лист", "0 = не, 1 = винаги, 2 = в полза на държавата", "3 = в полза на страна по делото", "1" },
	{ "application", "PRINT_EXEC_LIST_SUMS",	0, 'i', 0, 1,	&PRINT_EXEC_LIST_SUMS,	"Печат на суми в изпълнителните листи", "0 = печат на диспозитив на акта, 1 = печат на суми", "Подразбира се 1 (печат на суми)", "1" },
	{ "application", "NAP_PROT_OUT_LETTER",	2, 'i', 0, 1,	&NIA_PROT_OUT_LETTER,	"Генериране на изходящи номера за протоколите на предаване на ИЛ в НАП", "Подразбира се 0 (не)", NULL, "0" },
	{ "application", "LOCK_RECEIVE",		0, 'i', 0, 1,	&LOCK_RECEIVE,		"Заключване на полето \"дата\" при входящи документи, съпровождащи документи", "и документи от входящ регистър", "Подразбира се 0 (в полето може да се въвежда)", "0" },
	{ "application", "EXTERNAL_LAWSUIT_NO",	0, 'i', 0, 1,	&EXTERNAL_LAWSUIT_NO,	"Задължително вписване на номер дело при обрабоване на дело", "Подразбира се 0 (номера на дело може да се остави празен за", "използване на автоматична номерация)", "0" },
	{ "application", "USER_INTERSECT",		0, 'i', 0, 2,	&USER_INTERSECT,		"Ограничаване на падащите списъци със съдии в някои често използвани", "диалози. 0 = без ограничение, 1 = обща колегия/отделение, 2 = колегия/", "отделение и състав. Подразбира се 0. Не важи за потребители-съдии.", "0" },
	{ "application", "LOCK_REGISTER",		0, 'i', 0, 1,	&LOCK_REGISTER,		"Заключване на полето \"дата на съдебен акт\" при регистриране на съдебни", "актове", "Подразбира се 0 (в полето може да се въвежда)", "0" },
#if COURT_TYPE == COURT_MILITARY
	{ "application", "REPORT_NEW_LAWSUITS",	2, 'i', 0, 15,	&REPORT_NEW_LAWSUITS,	"Видове дела в колона \"новообразувани\" на отчета: 1 = по подсъдност,", "2 = върнато, 4 = възобновено, 8 = внесено след доразследване", "Стойностите се комбинират, например 5 = подсъдност + доразследване", "0" },
#endif  // MILITARY
	{ "application", "LINK_NOTIFICATION",	2, 'i', 0, 1,	&LINK_NOTIFICATION,	"\"Уведомление по чл.47, ал.1 и 7 ГПК\" и \"Уведомление по чл.47, ал.8 ГПК\"", "да се изготвят във връзка с конкретна призовка/съобщение", "Подразбира се 0 (не)", "0" },

	{ "hyper", "HTML_VIEWER",		0, 'p', 0, 250,	Electrics[TYPE_HTML].Actions[ACTION_VIEW].program,	"Програма за показване на хипертекстови документи", "Подразбира се програмата с която от Explorer се прави View или Open (в", "този ред) на хипертекстови документи; максимум 250 символа", NULL },
	{ "hyper", "HTML_VIEWER_ARGS",	0, 's', 0, 40,	Electrics[TYPE_HTML].Actions[ACTION_VIEW].arguments,	"Параметри за показване на хипертекстови документи", "Подразбира се никакви; максимум 40 символа", "Игнорира се ако не е указан HTML_VIEWER", NULL },
	{ "hyper", "HTML_EDITOR",		0, 'p', 0, 250,	Electrics[TYPE_HTML].Actions[ACTION_EDIT].program,	"Програма за редактиране на хипертекстови документи. Ако не е указана,", "вместо редактиране се изпълнява показване, тъй като за действието Edit", "на хипертекстови документи се подразбира Notepad. Максимум 250 символа.", NULL },
	{ "hyper", "HTML_EDITOR_ARGS",	0, 's', 0, 40,	Electrics[TYPE_HTML].Actions[ACTION_EDIT].arguments,	"Параметри за показване на хипертекстови документи", "Подразбира се никакви; максимум 40 символа", "Игнорира се ако не е указан HTML_EDITOR", NULL },
	{ "hyper", "WEB_SCHEME",		2, 'i', 0, 4,	&WEB_SCHEME,	"Схема за разпределяне на присъединените документи в WEB справката по", "директории: 0 стандартна, 1 ГГГГММ00, 2 ГГГГММДД, 3 ГГГГ00СС, 4 плоска", "Подразбира се 0 (схемата от електронна папка)", "0" },
	{ "hyper", "WEB_ATTACH",		2, 'i', 0, 1,	&WEB_ATTACH,	"Подразбираща се стойност на полето \"С обезличени документи\" в диалога на", "WEB справката", "Подразбира се 0 (изключено)", "0" },
	{ "hyper", "OPEN_DELTA",		0, 'i', 0, 50,	&HTML_OPEN_DELTA,	"Минимално време (в десети от секундата) между отваряне на два HTML файла", "Подразбира се 5 (половин секунда)", NULL, "5" },
	{ "hyper", "OVER_PATH",			2, 'd', 0, 200,	HTML_OVER_PATH,	"Директория за модифицирани шаблонни файлове", "Няма подразбираща се стойност; максимум 200 символа", "Може да се ползва и име на сървър, например \\\\SERVER\\VOL\\OVER", "" },
	{ "hyper", "MAPS_FORMAT",		0, 'i', 0, 2,	&HTML_MAPS_FORMAT,"Формат на картите: 0 = стандартен, 1 = алтернативен,", "2 = със снимки на сградите (изглед отгоре)" , "Подразбира се 0", "0" },
	{ "hyper", "MAPS_ZOOM",			0, 'i', 10, 30,	&HTML_MAPS_ZOOM,	"Мащаб на картите", "Подразбира се 17, минимум 10, максимум 30", "Само за стандартния формат на картите", "17" },
#if COURT_TYPE == COURT_APPEAL || COURT_TYPE == COURT_AREAL || COURT_TYPE == COURT_MILITARY || COURT_TYPE == COURT_REGIONAL
	{ "hyper", "LOGO_NAME",			2, 's', 5, 14,	HTML_LOGO_NAME,	"Име на файл с логото на съда", "Подразбира се CourtLogoN.png", "Максимум 14 символа", "CourtLogoN.png" },
	{ "hyper", "LOGO_WIDTH",		2, 'i', 0, 4090,	&HTML_LOGO_WIDTH,	"Ширина на извеждане на логото", "Подразбира се 119", "Минимум 0, максимум 4090", "119" },
	{ "hyper", "LOGO_HEIGHT",		2, 'i', 0, 4090,	&HTML_LOGO_HEIGHT,"Височина на извеждане на логото", "Подразбира се 94", "Минимум 0, максимум 4090", "94" },
#endif  // APPEAL || AREAL || MILITARY || REGIONAL
#if COURT_TYPE == COURT_ADMIN
	{ "hyper", "LOGO_NAME",			2, 's', 5, 14,	HTML_LOGO_NAME,	"Име на файл с логото на съда", "Подразбира се CourtLogoD.png", "Максимум 14 символа", "CourtLogoD.png" },
	{ "hyper", "LOGO_WIDTH",		2, 'i', 0, 4090,	&HTML_LOGO_WIDTH,	"Ширина на извеждане на логото", "Подразбира се 483", "Минимум 0, максимум 4090", "483" },
	{ "hyper", "LOGO_HEIGHT",		2, 'i', 0, 4090,	&HTML_LOGO_HEIGHT,"Височина на извеждане на логото", "Подразбира се 89", "Минимум 0, максимум 4090", "89" },
#endif  // ADMIN
	{ "hyper", "LOGO_SCALE",		0, 'i', 0, 1,	&HTML_LOGO_SCALE,	"Обратно мащабиране на логото при използване на по-голям размер на", "екранните шрифтове (например Medium/Среден = 125%) по работните", "станции. По принцип не е необходимо. Подразбира се 0 (не).", "0" },

	{ "sched", "ACTIVE",	0, 'i', 0,   1,   &SCHED_ACTIVE,	"Отчитане на срокове", "Подразбира се 0 (не)", NULL, "0" },
	{ "sched", "SHOWUP",	0, 'i', 0,   2,   &SCHED_SHOWUP,	"Извеждане на списък със сроковете на старта на програмата", "0 = не, 1 = да, 2 = с игнориране на \"Справки за дела от всички отделения\"", "Подразбира се 0 (не)", "0" },
	{ "sched", "DELTA_X",	1, 'i', -10, 10,	&SCHED_DELTA_X,	"Допълнителни дни за документи, издадени по пощата", "Подразбира се 1", NULL, "1" },
	{ "sched", "DELTA_Y",	1, 'i', -10, 0,	&SCHED_DELTA_Y,	"Брой дни преди датата на насрочването", "Подразбира се -1", NULL, "-1" },
	{ "sched", "DELTA_Z",	1, 'i', -10, 10,	&SCHED_DELTA_Z,	"Брой дни преди изтичане на срока", "Подразбира се 3", NULL, "3" },

	{ "sms", "ACTIVE",	2, 'i', 0, 1,	&SMS_ACTIVE,	"Изпращане на SMS-и", "Подразбира се 0 (не)", NULL, "0" },
	{ "sms", "PATH",		6, 'd', 0, 200,	SMS_PATH,		"Директория за файловете със SMS-и", "Няма подразбираща се стойност; максимум 200 символа", "Задължителна е при включено изпращане на SMS-и", NULL },

	{ "distribution", "SESSION_LENGTH",		0, 'i', 0, 240,	&DISTRIB_SESSION_LENGTH,	"Стандартна продължителност на заседанията за които не е указан краен час", "Подразбира се 60 минути; максимум 240", "При стойност 0 се приема че заседанията продължават до края на деня", "60" },
	{ "distribution", "SESSION_PAUSE",		0, 'i', 0, 120,	&DISTRIB_SESSION_PAUSE,		"Минимално време между заседанията, в които може да участва един заседател", "Подразбира се 10; максимум 120", NULL, "10" },
	{ "distribution", "LAWS_BY_REJUDGE",	0, 'i', 0, 1,	&DISTRIB_COUNT_REJUDGE,		"На кой съдия се води разпределено делото", "1 = съдията при образуване, 0 = текущия съдия по делото", "Подразбира с 1 (съдията при образуване)", "1" },
#if COURT_TYPE == COURT_AREAL || COURT_TYPE == COURT_MILITARY || COURT_TYPE == COURT_REGIONAL
	{ "distribution", "SESSION_TIMES",		0, 'i', 0, 2,	&DISTRIB_SESSION_TIMES,		"Въвеждане на точни начални и крайни часове за заседанията", "0 = не, 1 = само открити заседания, 2 = открити и закрити заседания", "Подразбира се 0 (не). Важи само за съдилища с пълен абонамент", "0" },
	{ "distribution", "SESSION_TIMES_FORCE",	0, 'i', 0, 1,	&DISTRIB_SESSION_TIMES_FORCE,	"Въвеждане на начални и крайни часове за заседанията дори ако няма избрани", "конкретни заседатели. Подразбира се 0 (не). Важи само за открити заседания,", "в които могат да се избират заседатели, при SESSION_TIMES >= 1.", "0" },
#endif  // AREAL || MILITARY || REGIONAL
	{ "distribution", "RESERVE_JURORS",		0, 'i', 0, 1,	&DISTRIB_RESERVE_JURORS,	"Резервиране на заседателите за един и същ състав в рамките на деня", "Подразбира се 0 (не)", NULL, "0" },
	{ "distribution", "JURORS_LOAD",		0, 'i', 0, 1,	&DISTRIB_JURORS_LOAD,		"Отчитане натоварването на съдебните заседатели при разпределение", "Подразбира се 0 (не се отчита)", NULL, "0" },
	{ "distribution", "SESSION_7302",		2, 'i', 0, 2,	&DISTRIB_SESSION_7302,		"За отложените заседания се приема продължителност 2 часа", "0 = не, 1 = да, 2 = да, освен за \"Отложено с вписване на споразумение\"", "Подразбира се 1; важи само за заседания след 09.08.2016г. включително", "1" },
	{ "distribution", "SESSION_MAX8H",		2, 'i', 0, 1,	&DISTRIB_SESSION_MAX8H,		"На ден се заплащат максимум 8 отработени часа", "Подразбира се 1 (да)", NULL, "1" },
	{ "distribution", "SESSION_MIN20L",		2, 'i', 0, 1,	&DISTRIB_SESSION_MIN20L,	"На ден се заплащат минимум 20 лева", "Подразбира се 1 (да)", "Важи само за заседания след 09.08.2016г. включително", "1" },

	{ "serial", "SERIAL_NO",    		0, 'r', 29, 29, SERIAL_NO,     		"Сериен номер", "Няма подразбираща се стойност", NULL, NULL },
	{ "serial", "LOGIN_LIMIT",  		2, 'i', 0,   5, &LOGIN_LIMIT,  		"Брой опити за разписване, след които потребителя се блокира", "Възможни стойности: 0 или 3...5", "Подразбира се 0 (неограничен брой опити за разписване)", "0" },
	{ "serial", "LOG_QUERIES",  		0, 'i', 0,   1, &LOG_QUERIES,  		"Водене на журнал за справка за дело/документ и електронна папка", "Подразбира се 0 (не)", NULL, "0" },
	{ "serial", "FULL_KIND_DATE", 	3, 'a', 2,   1, &FULL_KIND_DATE, 		"Начална дата, от която журнала съдържа достатъчно данни за", "допълнителна подредба на събитията", "Не подлежи на редактиране", "" },
	{ "serial", "EXEC_LIST_NUMBERING",	2, 'i', 0,   3, &EXEC_LIST_NUMBERING,	"Номерация на изпълнителните листи: 0 = в рамките на годината", "1 = година + вид изпълнителен лист, 2 = година + колегия/отделение", "3 = година + вид лист + колегия/отделение; Подразбира се 0", "0" },
	{ "serial", "EXEC_LIST_PRIV_SUMS",	2, 'i', 0,   1, &EXEC_LIST_PRIV_SUMS,	"Въвеждане на суми по изпълнителни листи в полза на страни по делото", "Подразбира се 1 (да)", NULL, "1" },
	{ "serial", "LEGAL_REQUEST_ID",	7, 'i', 2,   1, &LEGAL_REQUEST_ID,		"Служебна стойност във връзка с исканията за правна помощ", "Не подлежи на редактиране", NULL, "0" },
	{ "serial", "DOMAIN_NAME",		6, 'm', 0, 200, DOMAIN_NAME,			"Име на домейн, чрез който се извършва разписването на потребителите", "маркирани с \"Разписване чрез домейн\"", "Няма подразбираща се стойност; максимум 200 символа", "" },
	{ "serial", "NAP_PROT_NUMBERING",	2, 'i', 0,   1, &NIA_PROT_NUMBERING,	"Номерация на протоколите на предаване на ИЛ в НАП", "0 = в рамките на годината за целия съд; 1 = година + колегия/отделение", "Подразбира се 0 (за целия съд)", "0" },
#if COURT_TYPE == COURT_ADMIN
	{ "serial", "EXPORT_CSV_PATH",	2, 'd', 0, 200, EXPORT_CSV_PATH,		"Директория за експорт на данни в CSV файлове", "Няма подразбираща се стойност; максимум 200 символа", NULL, NULL },
#endif  // COURT_ADMIN
#if COURT_TYPE == COURT_APPEAL || COURT_TYPE == COURT_AREAL || COURT_TYPE == COURT_REGIONAL
	{ "serial", "COMPUTE_LAW_AGE",	2, 'i', 0,   1, &COMPUTE_LAW_AGE,		"Изчисляване на продължителността за граждански/търговски/административни дела", "0=от ЗЗ за насрочване на 1-во ОСЗ, 1=от датата на образуване на делото; важи за", "свършилите през 2016/2017г. дела и за въззивните, свършили след 01.01.2018г.", DEFAULT_LAW_AGE },
#endif  // APPEAL || AREAL || REGIONAL
#if COURT_TYPE == COURT_ADMIN || COURT_TYPE == COURT_MILITARY
	{ "serial", "COMPUTE_LAW_AGE",	2, 'i', 0,   1, &COMPUTE_LAW_AGE,		"Изчисляване на продължителността за граждански, търговски и административни", "дела: 0 = от ЗЗ за насрочване на ОСЗ, 1 = от датата на образуване на делото", "Подразбира се 0; важи само за дела приключили след 1.1.2016г.", "0" },
#endif  // ADMIN || MILITARY
#if COURT_TYPE == COURT_REGIONAL
	{ "serial", "DEPARTMENT",		2, 'i', 0,   1, &DEPARTMENT,			"Вместо \"колегия\" да се използва \"отделение\"", "Подразбира се 0 (не); Изиква се рестарт", NULL, "0" },
#endif  // REGIONAL
#if TESTVER
	{ "serial", "XFER_BANK_DATE", 	3, 'a', 2,   1, &XFER_BANK_DATE,		"Начална дата, от която протоколни актове се изпращат към ИСПН", "с инвидидуални идентификатори", "Не подлежи на редактиране", "" },
#endif  // TESTVER	

	{ "chrome", "FONT_SCALE",		0, 'i', 0, 24,	&CHROME_FONT_SCALE,		"Мащабиране на диалозите", "0 никакво, 1 автоматично, 8-24 - размер на шрифта", "Подразбира се 1", "1" },
	{ "chrome", "TEXT_MAXIMIZED",		0, 'i', 0, 2,	&CHROME_TEXT_MAXIMIZED,		"Размер на прозореца за показване на текст", "0 стандартен, 1 цял екран, 2 почти цял екран (без да закрива менюто)", "Подразбира се 0", "0" },
	{ "chrome", "HTML_MAXIMIZED",		0, 'i', 0, 2,	&CHROME_HTML_MAXIMIZED,		"Размер на прозореца за показване на HTML", "0 стандартен, 1 цял екран, 2 почти цял екран (без да закрива менюто)", "Подразбира се 2", "2" },
	{ "chrome", "PUSH_IMAGE",		0, 'i', 0, 1,	&CHROME_PUSH_IMAGE,		"Картинки за бутоните", "Подразбира се 1 (с картинки)", "Важи само за XP и следващите версии", "1" },
	{ "chrome", "AUTO_COMPLETE",		0, 'i', 0, 1,	&CHROME_AUTO_COMPLETE,		"Дописване на точки в датите", "Подразбира се 1 (да)", NULL, "1" },
	{ "chrome", "KEYBOARD_LAYOUT",	0, 'i', 0, 2,	&CHROME_KEYBOARD_LAYOUT,	"Превключване на клавиатурната подредба при разписване", "Подразбира се 0 (не)", NULL, "0" },
	{ "chrome", "AUTO_REMEMBER",		0, 'i', 0, 3,	&CHROME_AUTO_REMEMBER,		"Какви данни да се запомнят при избор на документ/дело", "0 = никакви, 1 = вид документ/дело, 2 = и година, 3 = и номер", "Подразбира се 3", "3" },
	{ "chrome", "EFILE_MENUS",		0, 'i', 0, 2,	&CHROME_EFILE_MENUS,		"Локални менюта за работа с обектите в електронна папка", "0 = не (подразбира се), 1 = да, 2 = икономичен режим", "При натоварена мрежа или сървър използвайте 0 или 2", "0" },
	{ "chrome", "THEME",			0, 'i', 0, 1,	&CHROME_THEME,			"Използване на Windows темата", "Подразбира се 0 (стандартен интерфейс)", "Важи само за XP и следващите версии", "0" },
	{ "chrome", "SIDE_SEARCH",		0, 'i', 0, 3,	&CHROME_SIDE_SEARCH,		"Търсене в списъците от страни/присъди: 0 - по първа буква, 1 - по първо", "име/дума, 2 - по всички имена/думи, 3 - по всички имена/думи, участие и", "код на лицето; подразбира се 0", "0" },
	{ "chrome", "AUTO_SELECT",		0, 'i', 0, 3,	&CHROME_AUTO_SELECT,		"Автоматично маркиране на документ или събитие при избор от списък", "съдържащ само един елемент", "Подразбира се 1 (да)", "1" },
	{ "chrome", "CENTER_OPEN_SAVE", 	0, 'i', 0, 1,	&CHROME_CENTER_OPEN_SAVE,	"Центриране на диалозите за избор на име на файл", "Подразбира се 0 (не)", NULL, "0" },
	{ "chrome", "LOAD_KNOWNS",		0, 'i', 0, 1,	&CHROME_LOAD_KNOWNS,		"Автоматично зареждане на списъка с участници в съдебния процес", "Подразбира се 1 (да)", NULL, "1" },
	{ "chrome", "WAIT_FOR_IDLE",		0, 'i', 5, 120,	&CHROME_WAIT_FOR_IDLE,		"Максимално изчакване стартирана от САС програма да зареди файл", "Подразбира се 15; работи по-добре с явно указани програми", NULL, "15" },
	//{ "chrome", "BARCODE_ENTER",	0, 'i', 0, 1,	&CHROME_BARCODE_ENTER,		"Автоматично потвърждение при сканиране на баркод", "Подразбира се 0 (скенера потвърждава)", NULL, "0" },
	{ "chrome", "PERCENT_SCALE",		0, 'i', 50, 100,	&CHROME_PERCENT_SCALE,		"Процентно мащабиране на прозорците за показване на текст, HTML и списък", "на призовките, спрямо реално изчисления мащаб на стандартните диалози.", "Подразбира се 75%, минимум: 50% (служебно >= 8 пункта), максимум 100%", "75" },
#if TESTVER
	{ "chrome", "UNICODE_CONVERT",	0, 'i', 0, 2,	&CHROME_UNICODE_CONVERT,	"Замяна на неподдържаните UNICODE символи при вмъкване на текст", "0 = Не, 1 = с въпросителна, 2 = с въпросителна или близка буква", "Подразбира се 1; при стойност 0, текста се конвертира от Windows", "1" },
#endif  // TESTVER

	{ "update", "ACTIVE",			2, 'i', 0, 1,	&UPDATE_ACTIVE,		"Да се прави ли автоматична актуализация (само за работни станции)", "Подразбира се 1 (да), желателно е да се изключва централно докато се", "извършва пълна сървърска актуализация или деархивиране на актуализация", "1" },
	{ "update", "PATH",			6, 'd', 0, 200,	UPDATE_DIRECTORY,		"Директория за автоматична актуализация", "Максимум 200 символа; няма подразбираща се стойност", "Може да се ползва и име на сървър, например \\\\SERVER\\VOL\\UPDATE", NULL },
	{ "update", "WAIT",			0, 'i', 2, 15,	&UPDATE_WAIT,		"Колко секунди да се изчаква преди започване на автоматичната актуализация", "Подразбира се 3; максимум 15", "Увеличете стойността ако получавате грешка 32 при копиране", "3" },
	{ "update", "VERBOSE",			1, 'i', 0, 1,	&UPDATE_VERBOSE,		"Диагностика на автоматичната актуализация", "Да се включва само временно, ако и докато на работната станция има", "проблем с автоматичната актуализация", "0" },
	{ "update", "POWERSHELL",		0, 'i', 0, 2,	&UPDATE_POWERSHELL,		"Актуализация чрез PowerShell скрипт вместо с изпълним файл", "1 = при Windows 7 и следващите, 2 = при Windows XP и следващите", "Подразбира се 0 (не)", "0" },
	{ "update", "LOCAL_COPY",		0, 'i', 0, 3,	&UPDATE_LOCAL_COPY,		"Копиране на актуализационната програма в директорията на САС", "0 = не, 1 = само lmupdate.exe, 2 = само lmupdate.ps1, 3 = и двете", "Подразбира се 0 (не)", "0" },

	{ "filter", "DECISIONS",	2, 'i', 0, 1,	&FILTER_DECISIONS,	"Съхраняване на обезличено копие от присъединените съдебни актове", "Подразбира се 1 (да)", NULL, "1" },
	{ "filter", "SESSIONS",		2, 'i', 0, 1,	&FILTER_SESSIONS,		"Съхраняване на обезличено копие от присъединените протоколи по заседания", "Подразбира се 1 (да)", NULL, "1" },
	{ "filter", "OTHERS",		2, 'i', 0, 1,	&FILTER_OTHERS,		"Съхраняване на обезличено копие от останалите видове присъединени", "текстови документи", "Подразбира се 1 (да)", "1" },
	{ "filter", "PATH",		2, 'd', 0, 200,	FILTER_PATH,		"Директория под която са разположени обезличените документи", "Няма подразбираща се стойност; максимум 200 символа", "Може да се ползва и име на сървър, например \\\\SERVER\\DOCKET\\FILTER", NULL },
	{ "filter", "TYPE",		2, 'i', 0, 1,	&FILTER_TYPE,		"Механизъм за обезличаване/замяна: 0 = Word OLE, 1 = Word OLE filtered HTML", "Подразбира се 0 (Word OLE)", NULL, "0" },
	{ "filter", "NUMBER",		0, 'i', 0, 1,	&FILTER_NUMBER,		"Замяна на първия текст \"... / ... [г.]\" в присъединения (текстов) документ", "с номер / дата на съдебния акт", "Подразбира се 0 (не)", "0" },
	{ "filter", "OLE_CASE",		2, 'i', 0, 1,	&FILTER_OLE_CASE,		"OLE търсене с отчитане на малки и главни букви. Подразбира се 1 (да).", "Използвайте 0 САМО ако получавате OLE грешка при замяна на текст.", "Обезличаването винаги игнорира регистъра на буквите.", "1" },
	{ "filter", "JUDICIAL",		2, 'i', 0, 2,	&FILTER_JUDICIAL,		"Заличаване имената на юридически лица", "0 = не, 1 = само ако съдържат ЕТ, АД, ООД...; 2 = всички", "Подразбира се 0", "0" },
	{ "filter", "HIDE_SPELL",	0, 'i', 0, 2,	&FILTER_HIDE_SPELL,	"Скриване на правописните и речниковите грешки в обезличеното копие", "Нормално е проверките за грешки да се извършват в изходния документ", "Подразбира се 0 (остават както са според настройките на Word)", "0" },
	{ "filter", "FIND_UCLP",	0, 'i', 0, 1,	&FILTER_FIND_UCLP,	"Търсене в БД за максимално съвпадение в имената на населените места", "Подразбира се 0 (не)", NULL, "0" },
	{ "filter", "FIND_STREET",	0, 'i', 0, 1,	&FILTER_FIND_STREET,	"Търсене в БД за максимално съвпадение в имената на улиците", "Подразбира се 0 (не)", NULL, "0" },
	{ "filter", "RUN_MACRO",	0, 'i', 0, 1,	&FILTER_RUN_MACRO,	"Стартиране на макроса CAC_FILTER_MACRO при присъединяване на документ към", "електронната папка на делото", "Подразбира се 0 (не)", "0" },

#if COURT_TYPE == COURT_APPEAL || COURT_TYPE == COURT_AREAL
	{ "transfer", "ACTIVE", 	2, 'i', 0, 15,	&XFER_ACTIVE,	"Електронен обмен на данни: 1 = с ЦУБИПСА, 2 = между съдилищата", "4 = с програмата за вещи лица, 8 = с ИСПН", "Стойностите се комбинират, например 5 = ЦУБИПСА + вещи лица", "0" },
#endif  // APPEAL || AREAL
#if COURT_TYPE == COURT_ADMIN || COURT_TYPE == COURT_MILITARY
	{ "transfer", "ACTIVE", 	2, 'i', 0, 3,	&XFER_ACTIVE,	"Електронен обмен на данни: 1 = с ЦУБИПСА, 2 = между съдилищата,", "3 = и двата вида", "Подразбира се 0 (не)", "0" },
#endif  // ADMIN
#if COURT_TYPE == COURT_REGIONAL
	{ "transfer", "ACTIVE", 	2, 'i', 0, 7,	&XFER_ACTIVE,	"Електронен обмен на данни: 1 = с ЦУБИПСА, 2 = между съдилищата,", "4 = с програмата за вещи лица", "Стойностите се комбинират, например 5 = ЦУБИПСА + вещи лица", "0" },
#endif  // REGIONAL
	{ "transfer", "PATH",		2, 'd', 0, 200,	XFER_PATH,		"Директория за приети файлове от електронна папка", "Няма подразбираща се стойност; максимум 200 символа", "Може да се ползва и име на сървър, например \\\\SERVER\\DOCKET\\TRANSFER", NULL },
#if COURT_TYPE == COURT_APPEAL || COURT_TYPE == COURT_AREAL || COURT_TYPE == COURT_REGIONAL
	{ "transfer", "CCEXP",		2, 's', 0, 200,	XFER_CCEXP,		"WEB адрес за назначаване на експертизи", "Подразбира се https://ams.justice.bg/Investigation/AssignmentFromCourt/", NULL, "https://ams.justice.bg/Investigation/AssignmentFromCourt/" },
#endif  // APPEAL || AREAL || REGIONAL
#if COURT_TYPE == COURT_APPEAL || COURT_TYPE == COURT_ADMIN || COURT_TYPE == COURT_AREAL || COURT_TYPE == COURT_REGIONAL
	{ "transfer", "EMAIL",		6, 'i', 0, 3,	&XFER_EMAIL,	"Изпращане на електронна поща", "1 = без присъединен файл, 2 = с необезличен файл, 3 = с обезличен файл", "Подразбира се 0 (не)", "0" },
#endif  // APPEAL || ADMIN || AREAL || REGIONAL
#if COURT_TYPE == COURT_APPEAL || COURT_TYPE == COURT_AREAL
	{ "transfer", "BANKRUPT_PATH",	2, 'd', 0, 200,	XFER_BANKRUPT_PATH,	"Директория за изпращане на XML файлове към ИСПН", "Няма подразбираща се стойност; максимум 200 символа", "Трябва да е достъпна за всички потребители изпращащи данни", NULL },
#endif  // APPEAL || AREAL
	{ "transfer", "LEGAL_AID",		2, 'i', 0, 1,	&XFER_LEGAL_AID,		"Обмен на данни с програма \"Служебни Защити\"", "Подразбира се 0 (не)", NULL, 0 },
	{ "transfer", "LEGAL_AID_PATH",	6, 'd', 0, 200,	&XFER_LEGAL_AID_PATH,	"Директория за обмен на данни с програма \"Служебни Защити\"", "Няма подразбираща се стойност; максимум 200 символа", "Трябва да е достъпна за всички потребители обменящи данни", NULL },
#if COURT_TYPE == COURT_APPEAL || COURT_TYPE == COURT_AREAL || COURT_TYPE == COURT_MILITARY || COURT_TYPE == COURT_REGIONAL
	{ "transfer", "EPORTAL",		2, 'i', 0, 2,	&XFER_EPORTAL, 		"Изпращане на данни към Единния портал за електронно правосъдие", "0 = не, 1 = да, 2 = без делата с ограничен достъп", "Подразбира се 0 (не)", "0" },
#endif  // APPEAL || AREAL || MILITARY || REGIONAL	
	{ "transfer", "LINK_APPEALS",		2, 'i', 0, 1,	&XFER_LINK_APPEALS,	"Присъединяване на всички основни електронни документи към извлечената", "жалба/протест. Подразбира се 0 (за всеки електронен документ се създава", "отделен съпровождащ документ към извлечената жалба/протест).", "0" },

	{ "eispp", "ACTIVE",		2, 'i', 0, 1,	&EISPP_ACTIVE,		"Изпращане на данни към ЕИСПП (изисква се комуникационна програма)", "Подразбира се 0 (не)", NULL, "0" },
	{ "eispp", "OUTPATH",		6, 'd', 0, 200,	EISPP_OUTPATH,		"Директория за изпращане на файлове към ЕИСПП", NULL, NULL, NULL },
	{ "eispp", "VZLPLC",		2, 's', 0, 255,	EISPP_VZLPLC,		"Вътрешно системно име на възела, който трябва да получи пакета", NULL, NULL, NULL },
	{ "eispp", "VZLIZP",		2, 's', 0, 255,	EISPP_VZLIZP,		"Вътрешно системно име на възела, който изпраща пакета", NULL, NULL, NULL },
	{ "eispp", "STRUCTURA_PLC",	2, 'i', 0, 99999, &EISPP_STRUCTURA_PLC,	"Идентификатор на структурата, която получава пакета", NULL, NULL, NULL },
	{ "eispp", "STRUCTURA_IZP",	2, 'i', 0, 99999, &EISPP_STRUCTURA_IZP,	"Идентификатор на структурата, която изпраща пакета", NULL, NULL, NULL },
	{ "eispp", "KST_USRSID",	2, 's', 0, 255,	EISPP_KST_USRSID,		"Системен идентификатор на потребител", NULL, NULL, NULL },
	{ "eispp", "KST_USRREJ",	2, 's', 0, 255,	EISPP_KST_USRREJ,		"Режим на работа на регистрирания потребител", NULL, NULL, NULL },
	{ "eispp", "KST_USRRAB",	2, 's', 0, 255,	EISPP_KST_USRRAB,		"Системен идентификатор на реалната структура от името на която се", "изпраща пакета", NULL, NULL },
	{ "eispp", "KST_ARMSID",	2, 's', 0, 255,	EISPP_KST_ARMSID,		"Идентификатор на работно място, получен при регистрация", NULL, NULL, NULL },
	{ "eispp", "XMLPATH",		6, 'd', 0, 200,	EISPP_XMLPATH,		"Директория под която се съхраняват файловете на ЕИСПП", NULL, NULL, NULL },
	{ "eispp", "KST_OKASID",	2, 'z', 0, 1,	EISPP_KST_OKASID,		"Вид на обработката, която се изпълнява", "Не се попълва, или 0", NULL, NULL },
	{ "eispp", "KST_SBEVID",	2, 'z', 0, 1,	EISPP_KST_SBEVID,		"Вид събитие, ако не е изрично зададен в събитието", "Не се попълва, или 0", NULL, NULL },
	{ "eispp", "KST_ARMSTRSID",	2, 'z', 0, 1,	EISPP_KST_ARMSTRSID,	"Резервирано за вътрешно използване в ЕИСПП", "Не се попълва, или 0", NULL, NULL },
	{ "eispp", "KST_SESSID",	2, 'z', 0, 1,	EISPP_KST_SESSID,		"Системен идентификатор на он-лайн сесията", "Не се попълва, или 0", NULL, NULL },
	{ "eispp", "KST_LGTSID",	2, 'z', 0, 1,	EISPP_KST_LGTSID,		"Системен идентификатор на транзакцията в ЕИСПП", "Не се попълва, или 0", NULL, NULL },
	{ "eispp", "QUERY_TIMEOUT",	2, 'i', 60, 600,	&EISPP_QUERY_TIMEOUT,	"Изчакване в секунди за получаване на резултат от справка", "Подразбира се 180", NULL, NULL },
	{ "eispp", "EIQ_USRSID",	2, 's', 0,  255,	EISPP_EIQ_USRSID,		"Системен идентификатор на потребител - за справки", NULL, NULL, NULL },
	{ "eispp", "EIQ_USRREJ",	2, 's', 0,  255,	EISPP_EIQ_USRREJ,		"Режим на работа на регистрирания потребител - за справки", "Подразбира се 8628", NULL, "8628" },
	{ "eispp", "DIAG_NAMES",	1, 'i', 0, 1,	&EISPP_DIAG_NAMES,	"Диагностични имена на невалидните атрибути", "Подразбира се 0 (не)", "Използва са само за диагностика", "0" },

	{ "posterm", "BUDGET_ACTIVE",		1, 'i', 0,  1,	POSTERM_ACTIVE + 0,	"Плащане по сметка Бюджет през ПОС терминал", "Подразбира се 0 (не)", NULL, "0" },
	{ "posterm", "BUDGET_PORT_NAME",	0, 'j', 1,  23,	POSTERM_PORT_NAME + 0,	"Име на COM порта за плащане по сметка Бюджет (без двоеточие)", "Подразбира се COM1", NULL, "COM1" },
	{ "posterm", "DEPOSITS_ACTIVE",	1, 'i', 0,  1,	POSTERM_ACTIVE + 1,	"Плащане по сметка Депозити през ПОС терминала е активен", "Подразбира се 0 (не)", NULL, "0" },
	{ "posterm", "DEPOSITS_PORT_NAME",	0, 'j', 1,  23,	POSTERM_PORT_NAME + 1,	"Име на COM порта за плащане по сметка Депозити", "Подразбира се COM2", NULL, "COM2" },
	{ "posterm", "ECR",			0, 'i', 1,  99,	&POSTERM_ECR,		"Номер на електронна каса", "Подразбира се 0 (няма)", NULL, "0" },
	{ "posterm", "OPERATOR",		1, 'i', 0,  9999,	&POSTERM_OPERATOR,	"Код на оператор", "Подразбира се 0", NULL, "0" },
	{ "posterm", "CURRENCY",		0, 'i', 0,  999,	&POSTERM_CURRENCY,	"Код на валута", "Подразбира се 975", NULL, "975" },
	{ "posterm", "REINITIALIZE",		0, 'i', 0,  720,	&POSTERM_REINITIALIZE,	"Брой минути, след които COM портовете се преинициализират", "Подразбира се 0 (няма преинициализация); максимум 720", "При промяна е необходим рестарт на САС", "0" },

	{ NULL, NULL, 0, '\0', 0, 0, NULL, NULL, NULL, NULL, NULL }
};

// ----- TSetting ------------------------------------------------------------
class TSetting : public TStringAliasGroup
{
public:
	TSetting(const TSettingData *tData);

	const TSettingData *const Data;
	bool operator<=(const TSetting &that) const { return strcmp(name, that.name) <= 0; }

protected:
	char name[SIZE_OF_NAME];
};

TSetting::TSetting(const TSettingData *tData)
	: TStringAliasGroup("T_SETTING", NULL, "F_NAME", name, sizeof name, "F_TEMP", name, sizeof name, NULL, NULL),
		Data(tData)
{
	Remove("F_TEMP");
	nameField = (TStringAlias *) valueField;
	strcpy(name, Data->name);
}

// ----- TConfigure ----------------------------------------------------------
mstr TConfigure::errors;
char *TConfigure::buffer;

TConfigure Configure;

TConfigure::TConfigure()
{
	int count = 0;

	for (TSettingData *settingData = SettingData; settingData->section; settingData++)
		count++;

	buffer = new char[count * SIZE_OF_CONFIG_VALUE];
	ForEach(Init);
	Reset();

	strcpy(Electrics[TYPE_HTML].ext[0].type, "htm");
	strcpy(Electrics[TYPE_EISPP].ext[0].type, "xml");
	// 2016:004 LRQ/TRQ: FIX: activate HYPER_* for WEB_FIX.html etc.
	strcpy(Electrics[TYPE_HTML].ext[0].ltype, "html");
	strcpy(Electrics[TYPE_PORTREG].ext[0].type, PORTABLE_TYPE);	// 2016:165
}

void TConfigure::Load(const char *configName)
{
	TConfigData configData(configName);
	msql m;

	configData.FloatCriteria(m);
	TQuery q(str(m));
	while (q.Read())
	{
		configData << q;
		const TSettingData *settingData = Find(configData.section, configData.name);

		if (settingData)
		{
			if (settingData->flags & SETTING_VOLATILE)
				continue;

			// 2015:030 LPR: ignore local "serial" settings flaged as non-local
			if (strcmp(configName, CONFIG_NAME_GLOBAL) && !AllowLocal(settingData))
				continue;

			strcpy(Buffer(settingData), configData.value);
		}
	#if RANGECHECK
		else if (strcmp(configData.name, "POWERSHELL_POLICY") && strcmp(configData.name, "UNICODE_CONVERT"))
		{
			errors.sep("\n");
			errors.printf("[%s] %s: настройката не се поддържа.", configData.section, configData.name);
		}
	#endif  // RANGECHECK
	}
}

const char *TConfigure::Invalid(const TSettingData *settingData, const char *value)
{
	if (!any(value))
	{
		return settingData->type == SETTING_INTEGER ? "Невалидно число" :
			settingData->type == SETTING_DATE ? "Невалидна дата" : NULL;
	}

	if (settingData->type == SETTING_DATE)
	{
		CDate date;
		sscanf(value, "%d.%d.%ld", &date.day, &date.month, &date.year);
		return date.Valid() ? NULL : "Невалидна дата";
	}

	if (settingData->type == SETTING_ZERO_STRING)
		return strcmp(value, "0") ? "Невалидна стойност" : NULL;

	if (settingData->type == SETTING_SERIALNO && !snd_check(value))
		return "Невалиден сериен номер";

	if (settingData->type == SETTING_INTEGER)
	{
		const char *s = value;
		long num = atol(value);

		if (strlen(s) >= SIZE_OF_CONFIG_INTEGER)
			return "Прекалено дълго число";

		if (*s == '-' && *++s == '\0')
			return "Невалидно число.";

		while (*s)
			if (!isdigit(*s++))
				return "Невалидно число";

		return num < settingData->min || num > settingData->max ? "Стойността е извън обхвата" : NULL;
	}

	if (strlen(value) < settingData->min && strlen(value) > settingData->max)
		return "Невалидна дължина";

#if TESTVER
	if (settingData->type == SETTING_ELECTRIC_TYPE)
		return ParseElectricTypes(value, NULL);

	if (settingData->type == SETTING_DOMAIN && DsGetDcNameA)
	{
		PDOMAIN_CONTROLLER_INFOA pDomainInfo = NULL;
		DWORD result = DsGetDcNameA(NULL, value, NULL, NULL, 0, &pDomainInfo);

		if (pDomainInfo)
			NetApiBufferFree(pDomainInfo);

		switch (result)
		{
			case ERROR_SUCCESS : break;
			case ERROR_INVALID_DOMAINNAME : return "Неправилно формирано име на домейн";
			case ERROR_NO_SUCH_DOMAIN : return "Не е намерен домейн контролер";
			default : return "Грешка при валидиране името на домейна";
		}
	}

	if (settingData->type == SETTING_PROGRAM)
	{
		if (value[0] == SETTING_PROGID_PREFIX)
			return value[1] ? NULL : "Не е указано име на програмен идентификатор";

		if (!exist(value))
			return errno == EISDIR ? "Указано е име на директория" : "Програмата липсва или е недостъпна";

		DWORD binaryType;

		if (!GetBinaryType(value, &binaryType))
			return "Файлът не е изпълним, или типът му не може да бъде установен";

		if (!strcmp(settingData->name, "SIGN_TEST"))
			return NULL;  // skip absolute check
	}

	if (settingData->type == SETTING_DIRECTORY)
	{
		if (!exist(value, false))
			return errno == ENOTDIR ? "Указано е име на файл" : "Директорията липсва или е недостъпна";
	}
#else  // TESTVER
	if (settingData->type == SETTING_ELECTRIC_TYPE)
	{
		const char *s;

		if ((s = ParseElectricTypes(value, NULL)) != NULL)
			return s;
	}

	else if (settingData->type == SETTING_DOMAIN && DsGetDcNameA)
	{
		PDOMAIN_CONTROLLER_INFOA pDomainInfo = NULL;
		DWORD result = DsGetDcNameA(NULL, value, NULL, NULL, 0, &pDomainInfo);

		if (pDomainInfo)
			NetApiBufferFree(pDomainInfo);

		switch (result)
		{
			case ERROR_SUCCESS : break;
			case ERROR_INVALID_DOMAINNAME : return "Неправилно формирано име на домейн";
			case ERROR_NO_SUCH_DOMAIN : return "Не е намерен домейн контролер";
			default : return "Грешка при валидиране името на домейна";
		}
	}

	bool program = settingData->type == SETTING_PROGRAM;

	if ((program || settingData->type == SETTING_DIRECTORY) && !exist(value, program))
		return program ? "Програмата липсва или е недостъпна" : "Директорията липсва или е недостъпна";
#endif  // TESTVER

	return NULL;
}

void TConfigure::GetGlobal(const char *section, const char *name, char *value)
{
	const TSettingData *settingData = Find(section, name, "GetGlobal");

	if (!Try(CONFIG_NAME_GLOBAL, settingData, value))
		strcpy(value, settingData->_default);
}

bool TConfigure::GetCurrent(const char *section, const char *name, const char *_default, bool showErrors)
{
	const TSettingData *settingData = Find(section, name, "GetCurrent");
	char *buffer = Buffer(settingData);

	if (_default)
		strcpy(buffer, _default);

	if ((AllowLocal(settingData) && Try(CONFIG_NAME_LOCAL, settingData, buffer)) ||
		Try(CONFIG_NAME_GLOBAL, settingData, buffer) || _default)
	{
		if (showErrors)
			errors.clear();

		if (!Apply((TSettingData *) settingData))
			return showErrors ? error("%s", errors.str()) : false;
	}

	return true;
}

bool TConfigure::GetCurrent(const char *section, const char *name, bool showErrors)
{
	return GetCurrent(section, name, (const char *) NULL, showErrors);
}

bool TConfigure::GetCurrent(const char *section, const char *name, long _default, bool showErrors)
{
	mstr m;
	m.printf("%ld", _default);
	return GetCurrent(section, name, str(m), showErrors);
}

void TConfigure::LoadCache(TGroupArray *settings, const char *section, TGArray<TConfigData> *exclude)
{
	for (const TSettingData *settingData = SettingData; settingData->section; settingData++)
	{
		if (!strcmp(settingData->section, section))
		{
		#if COURT_TYPE == COURT_ADMIN
			if (_COURT_CSVE && !COURT_CSVE && !strcmp(settingData->section, "serial") &&
				!strcmp(settingData->name, "EXPORT_CSV_PATH"))
			{
				continue;
			}
		#endif  // COURT_ADMIN

			if (exclude)
			{
				int i;

				for (i = 0; i < exclude->Count(); i++)
					if (!strcmp((*exclude)[i]->name, settingData->name))
						break;

				if (i < exclude->Count())
					continue;

				// inside "if (exclude)" to edit unsupported settings
			#if TESTVER
				// 2018-06-26: don't remove setings if testver
			#else  // TESTVER
				if (COURT_CODE != COURT_SOFGS)
				{
					if (!strcmp(settingData->name, "WORD_OPEN_7A"))
						continue;

					if (!strcmp(settingData->name, "SERVER_NAME") || !strcmp(settingData->name, "LOCK_REGISTER"))
						continue;
				}
			#endif  // TESTVER
			}

			settings->Add(new TSetting(settingData));
		}
	}
}

const TSettingData *TConfigure::Find(const char *section, const char *name, const char *oper)
{
	for (TSettingData *settingData = SettingData; settingData->section; settingData++)
		if (!strcmp(settingData->section, section) && !strcmp(settingData->name, name))
			return settingData;

	if (oper)
		fatal("TConfigure::%s: unknown [%s] %s", oper, section, name);

	return NULL;
}

void TConfigure::Update(const char *section, const char *name, const char *value)
{
	TConfigData configData(CONFIG_NAME_LOCAL);

	Find(section, name, "Update");
	strcpy(configData.section, section);
	strcpy(configData.name, name);
	// 2014:119 TRQ/FIX: don't assume local data exists
	if (configData.Try())
	{
		strcpy(configData.value, value);
		configData.Update();
	}
}

bool TConfigure::AllowLocal(const TSettingData *settingData)
{
	return strcmp(settingData->section, "serial") || !(settingData->flags & SETTING_NON_LOCAL);
}

char *TConfigure::Buffer(const TSettingData *settingData)
{
	return buffer + (settingData - SettingData) * SIZE_OF_CONFIG_VALUE;
}

void TConfigure::ForEach(void (*action)(TSettingData *settingData))
{
	for (TSettingData *settingData = SettingData; settingData->section; settingData++)
		action(settingData);
}

void TConfigure::Init(TSettingData *settingData)
{
	if (!settingData->_default)
		settingData->_default = "";
}

void TConfigure::Reset(TSettingData *settingData)
{
	strcpy(Buffer(settingData), settingData->_default);
	GetValue(settingData);
}

bool TConfigure::Try(const char *configName, const TSettingData *settingData, char *buffer)
{
	TConfigData configData(configName);

	strcpy(configData.section, settingData->section);
	strcpy(configData.name, settingData->name);

	if (configData.Try())
	{
		strcpy(buffer, configData.value);
		return true;
	}

	return false;
}

void TConfigure::AddError(const char *text)
{
	errors.sep("\n");
	errors.cat(text);
	errors.cat(".");
}

void TConfigure::AddError(const char *section, const char *name, const char *text)
{
	errors.sep("\n");
	errors.printf("[%s] %s: %s.", section, name, text);
}

void TConfigure::ShowErrors()
{
	if (any(errors))
	{
		error("%s", str(errors));
		errors.clear();
	}
}

bool TConfigure::Apply(TSettingData *settingData)
{
	const char *buffer = Buffer(settingData);

	if (strcmp(buffer, settingData->_default))
	{
		const char *invalid = Invalid(settingData, buffer);

		if (invalid)
		{
			AddError(settingData->section, settingData->name, invalid);
			return false;
		}
		else
			GetValue(settingData);
	}

	return true;
}

void TConfigure::ApplyA(TSettingData *settingData)
{
	Apply(settingData);
}

void TConfigure::GetValue(TSettingData *settingData)
{
	const char *buffer = Buffer(settingData);

	if (settingData->type == SETTING_INTEGER)
		*(long *) settingData->value = atol(buffer);
	// 2013:246
	else if (settingData->type == SETTING_DATE)
	{
		CDate *date = (CDate *) settingData->value;

		if (sscanf(buffer, "%d.%d.%ld", &date->day, &date->month, &date->year) != 3)
			date->Clear();
	}
	// 2014:023
	else if (settingData->type == SETTING_ELECTRIC_TYPE)
		ParseElectricTypes(buffer, (TDoubleExt *) settingData->value);
	else
		strcpy((char *) settingData->value, buffer);
}

const char *TConfigure::ParseElectricTypes(const char *value, TDoubleExt *exts)
{
	if (!*value)
		return "Невалидна стойност";

	if (*value == ' ' || value[strlen(value) - 1] == ' ')
		return "Не може да започва или завършва с интервал";

	if (strstr(value, "  "))
		return "Типовете се разделят с по 1 интервал";

	for (const char *s = value; *s; s++)
	{
		if ((!isalnum(*s) && !ispunct(*s) && *s != ' ') || strchr(SETTING_BAD_ELECTRIC_TYPE_CHARS, *s))
			return "Съдържа невалидни символи";

		if (*s == '<')
		{
			// artificial limitation
			if (s == value || s[-1] == ' ')
				return "Първият символ от типовете е задължителен";

			if (strchr("<> ", s[1]) || (s[2] != '>' && s[2] != '<'))
				return "Грешно указан незадължителен символ";

			s += 2;
		}
		else if (*s == '>' && (s - value < 2 || s[-2] != '<'))
			return "Грешно указан незадължителен символ";
	}

	TDoubleExt *ext = exts;

	if (exts)
		memset(ext, '\0', ELECTRIC_EXTS_MAX * sizeof(TDoubleExt));

	for (size_t count = 0; ;)
	{
		const char *end = strchr(value, ' ');
		const char *less = strchr(value, '<');
		const char *great;

		if (!end)
			end = value + strlen(value);
		else if (less > end)
			less = NULL;

		if (less)
		{
			// 2016:008 LPR: limitation removed
			//if (count)	// artificial limitation
			//	return "Само първия тип може да включва незадължителен символ";

			great = less + 2;
		}

		if (++count > ELECTRIC_EXTS_MAX)
			return "Прекалено много типове";

		if (end - value > (less ? LENGTH_OF_EXT + 2 : LENGTH_OF_EXT))
			return "Прекалено дълъг тип";

		if (exts)
		{
			if (less)
			{
				bool swap = *great++ == '<';
				size_t l_len = less - value, g_len = end - great;

				memcpy(ext->type, value, l_len);
				memcpy(ext->type + l_len, great, g_len);
				ext->type[l_len + g_len] = '\0';

				memcpy(ext->ltype, value, l_len);
				ext->ltype[l_len] = less[1];
				memcpy(ext->ltype + l_len + 1, great, g_len);
				ext->ltype[l_len + g_len + 1] = '\0';

				if (swap)
				{
					char temp[SIZE_OF_EXT];

					strcpy(temp, ext->type);
					strcpy(ext->type, ext->ltype);
					strcpy(ext->ltype, temp);
				}
			}
			else
			{
				memcpy(ext->type, value, end - value);
				ext->type[end - value] = '\0';
				*ext->ltype = '\0';
			}

			ext++;
		}

		// avoid CG errors  
		if (!*end)
			break;

		value = end + 1;
	}

	return NULL;
}

#include "SettingAliasFace.h"
#include "SettingAliasFace.cpp"

#include "SettingValidator.h"
#include "SettingValidator.cpp"

#include "SettingFace.h"
#include "SettingFace.cpp"

#include "EditConfigDataDialog.h"
#include "EditConfigDataDialog.cpp"

bool edit_config_data(TWindow *parent, TConfigData *configData, TGArray<TConfigData> *exclude)
{
	TGSArray<TSetting> settings;
	TConfigure::LoadCache(&settings, configData->section, exclude);

	if (!settings.Count())
		return error("В тази секция няма други настройки за добавяне.");

	return TEditConfigDataDialog(parent, configData, &settings, !exclude).Execute() == IDOK;
}

#include "ConfigDataListWindow.h"
#include "ConfigDataListWindow.cpp"

#include "ConfigDataListDialog.h"
#include "ConfigDataListDialog.cpp"

#include "GetConfigNameDialog.h"
#include "GetConfigNameDialog.cpp"

static bool get_config_name(TWindow *parent, TConfigName *configName, const char *title, const char *invalid)
{
	return TGetConfigNameDialog(parent, configName, title, invalid).Execute() == IDOK;
}

static bool copy_config(TConfigName *sourceName, TConfigName *targetName)
{
	TConfigBase sourceData("T_CONFIG_DATA", sourceName->config, TABLE_CONFIG_DATA);
	TConfigData targetData(NULL);
	msql m;

	sourceData.ExactCriteria(m);
	TQuery q(str(m));
	while (q.Read())
	{
		targetData << q;
		// 2012:247 TRQ: FIX: don't copy serials
		if (strcmp(targetData.section, "serial"))
			strcpy(targetData.config, targetName->config);
		if (!targetData.Try() && !targetData.Insert())
			return false;
	}

	return true;
}

#define config OFFICE_GROUP_CAST(TConfigName)

static void config_version(mstr &m, TGroup *group)
{
	m.cat(config->version);

	if (strlen(config->version) > strlen(VERSION))
		ncstr(m)[strlen(VERSION)] = '+';
}

static void config_protocol(mstr &m, TGroup *group)
{
	if (strlen(config->version) > strlen(VERSION))
	{
		switch (config->version[strlen(VERSION)])
		{
			case 'o' : m.cat("ODBC"); break;
			case 'b' : m.cat("BDE"); break;
		}
	}
}

#undef config

#include "ConfigNameListWindow.h"
#include "ConfigNameListWindow.cpp"

#include "ConfigNameListDialog.h"
#include "ConfigNameListDialog.cpp"

void configure(TWindow *parent)
{
	// 2010:110 LPR/LRQ: system admin -> post ADMIN
	if (Default->post == POST_ADMIN)
		TConfigNameListDialog(parent).Execute();
	else
	{
		TConfigName configName(CONFIG_NAME_LOCAL);

		if (configName.Try() || configName.Insert())
			TConfigDataListDialog(parent, &configName).Execute();
	}
}
